--- a/drivers/mtd/mtdpart.c
+++ b/drivers/mtd/mtdpart.c
@@ -628,6 +628,37 @@ int mtd_del_partition(struct mtd_info *m
 }
 EXPORT_SYMBOL_GPL(mtd_del_partition);
 
+static int
+run_parsers_by_type(struct mtd_part *slave, enum mtd_parser_type type)
+{
+	struct mtd_partition *parts;
+	int nr_parts;
+	int i;
+
+	nr_parts = parse_mtd_partitions_by_type(&slave->mtd, type, &parts,
+						NULL);
+	if (nr_parts <= 0)
+		return nr_parts;
+
+	if (WARN_ON(!parts))
+		return 0;
+
+	for (i = 0; i < nr_parts; i++) {
+		/* adjust partition offsets */
+		parts[i].offset += slave->offset;
+
+		__mtd_add_partition(slave->master,
+				    parts[i].name,
+				    parts[i].offset,
+				    parts[i].size,
+				    false);
+	}
+
+	kfree(parts);
+
+	return nr_parts;
+}
+
 static inline unsigned long
 mtd_pad_erasesize(struct mtd_info *mtd, int offset, int len)
 {
@@ -714,6 +745,12 @@ static void split_uimage(struct mtd_info
 
 static void split_firmware(struct mtd_info *master, struct mtd_part *part)
 {
+	int ret;
+
+	ret = run_parsers_by_type(part, MTD_PARSER_TYPE_FIRMWARE);
+	if (ret > 0)
+		return;
+
 	if (config_enabled(CONFIG_MTD_UIMAGE_SPLIT))
 		split_uimage(master, part);
 }
@@ -731,9 +768,12 @@ static void mtd_partition_split(struct m
 		return;
 
 	if (!strcmp(part->mtd.name, "rootfs")) {
+		int ret;
+
 		rootfs_found = 1;
 
-		if (config_enabled(CONFIG_MTD_ROOTFS_SPLIT))
+		ret = run_parsers_by_type(part, MTD_PARSER_TYPE_ROOTFS);
+		if (ret <= 0 && config_enabled(CONFIG_MTD_ROOTFS_SPLIT))
 			split_rootfs_data(master, part);
 	}
 
--- a/include/linux/mtd/partitions.h
+++ b/include/linux/mtd/partitions.h
@@ -70,6 +70,8 @@ struct mtd_part_parser_data {
 
 enum mtd_parser_type {
 	MTD_PARSER_TYPE_DEVICE = 0,
+	MTD_PARSER_TYPE_ROOTFS,
+	MTD_PARSER_TYPE_FIRMWARE,
 };
 
 struct mtd_part_parser {
